// Define the output directory for intermediate files
// final results are stored in ${projectDir}/FINAL_OUTPUT
params.outdir = "${projectDir}/intermediate_files"
params.workflow = params.workflow ?: "all"  // default = "all"

// Define Channels
Channel.fromPath(file(params.RNAseq_samplesheet))
       .splitCsv(header: true, sep: ',')
       .filter( ~/.*long.*/ )
       .map { row -> [ row.sampleID, row.SRA_or_FASTQ, row.library_layout ] }
       .set{ samples_list_long_reads }

Channel.fromPath(file(params.RNAseq_samplesheet))
       .splitCsv(header: true, sep: ',')
       .filter( ~/.*single.*/ )
       .map { row -> [ row.sampleID, row.SRA_or_FASTQ, row.library_layout ] }
       .set{ samples_list_single_short_reads }

Channel.fromPath(file(params.RNAseq_samplesheet))
       .splitCsv(header: true, sep: ',')
       .filter( ~/.*paired.*/ )
       .map { row -> [ row.sampleID, row.SRA_or_FASTQ, row.library_layout ] }
       .set{ samples_list_paired_short_reads }

// Combined single and paired-end reads
samples_list_single_short_reads
    .concat(samples_list_paired_short_reads)
    .set { samples_list_short_reads }

Channel.fromPath(file(params.protein_samplesheet))
       .splitCsv(header: true, sep: ',')
       .map { row -> [ row.organism, row.filename ] }
       .set{ protein_list }

// Include subworkflows
include { generate_evidence_data } from "./subworkflows/generate_evidence_data.nf"
include { aegis } from "./subworkflows/aegis.nf"

// Execute main workflow
workflow {

    def workflow_generate_evidence_data_outputs
    // if the workflow parameter is equal to generate_evidence_data or all, the first workflow is executed
    if (params.workflow == "generate_evidence_data" || params.workflow == "all") {
        workflow_generate_evidence_data_outputs = generate_evidence_data(samples_list_long_reads, samples_list_short_reads, protein_list)
        workflow_generate_evidence_data_outputs = workflow_generate_evidence_data_outputs
          .flatMap { outputs_map -> 
            outputs_map.collect { key, value -> tuple(val(key), value) }
          }
    }

    // if the workflow parameter is equal to aegis, the outputs generated by the first workflow (generate_evidence_data) must be retrieved manually.
    if (params.workflow == "aegis") {

      def outdir_1 = params.output_dir

      // Load manually the outputs of generate_evidence_data workflow
      workflow_1_outputs = []

      if (params.EDTA == 'yes') {
        workflow_1_outputs << tuple(val("masked_genome"), Channel.fromPath("${outdir_1}/assembly_masked.EDTA.fasta"))
      }

      if (params.use_long_reads) {
        workflow_1_outputs << tuple(val("stringtie_long_reads_default"), Channel.fromPath("${outdir_1}/merged_minimap2_stringtie_long_reads_default.gtf"))
        workflow_1_outputs << tuple(val("stringtie_long_reads_alt"), Channel.fromPath("${outdir_1}/merged_minimap2_stringtie_long_reads_alt.gtf"))
      }

      workflow_1_outputs << tuple(val("braker3_augustus"), Channel.fromPath("${outdir_1}/augustus.hints.gff3"))
      workflow_1_outputs << tuple(val("braker3_genemark"), Channel.fromPath("${outdir_1}/genemark.gtf"))
      workflow_1_outputs << tuple(val("liftoff_annotations"), Channel.fromPath("${outdir_1}/liftoff_previous_annotations.gff3"))
      workflow_1_outputs << tuple(val("stringtie_short_reads_STAR_default_stranded"), Channel.fromPath("${outdir_1}/merged_star_stringtie_stranded_default.gtf"))
      workflow_1_outputs << tuple(val("stringtie_short_reads_STAR_alt_stranded"), Channel.fromPath("${outdir_1}/merged_star_stringtie_stranded_alt.gtf"))
      workflow_1_outputs << tuple(val("gffcompare_star_psiclass_stranded"), Channel.fromPath("${outdir_1}/merged_star_psiclass_stranded.gtf"))
      workflow_1_outputs << tuple(val("stringtie_short_reads_STAR_default_unstranded"), Channel.fromPath("${outdir_1}/merged_star_stringtie_unstranded_default.gtf"))
      workflow_1_outputs << tuple(val("stringtie_short_reads_STAR_alt_unstranded"), Channel.fromPath("${outdir_1}/merged_star_stringtie_unstranded_alt.gtf"))
      workflow_1_outputs << tuple(val("gffcompare_star_psiclass_unstranded"), Channel.fromPath("${outdir_1}/merged_star_psiclass_unstranded.gtf"))

      aegis(workflow_1_outputs) // Give the generate_evidence_data workflow's output to aegis workflow
    }

    if (params.workflow == "all") {
      aegis(workflow_generate_evidence_data_outputs)
    }
    
}